az login

# Allow installing extensions without prompt
az config set extension.use_dynamic_install=yes_without_prompt

# Gets the details for the currently logged-in user
$principalObjectId=$(az ad signed-in-user show --query objectId --output tsv)

$resourceGroup="asset-tracking-rg"
$location="northeurope"

# Create a resource group
az group create --name $resourceGroup --location $location

$templateFile="azuredeploy.json"
$today=Get-Date -Format "MM-dd-yyyy"
$deploymentName="addiothub-"+"$today"

$iotHub="asset-tracking-hub"
$iotHubSharedAccessPolicy="iothubowner"
$dpsName="asset-tracking-dps"
$skuName="S1"


#----------------------------------------------------------------------------------------------------
# Create an IoT Hub and DPS service
# See: https://docs.microsoft.com/en-us/azure/iot-dps/quick-setup-auto-provision#create-an-iot-hub
#      https://docs.microsoft.com/en-us/cli/azure/deployment/group?view=azure-cli-latest#az_deployment_group_create

az deployment group create `
    --name $deploymentName `
    --resource-group $resourceGroup `
    --template-file $templateFile `
    --parameters hub_name=$iotHub hub_sku_name=$skuName dps_name=$dpsName

# Create primary and secondary keys

$maxLength=32
$randomString=-join (((33..126)) * 100 | Get-Random -Count $maxLength | %{[char]$_})
$bytes=[System.Text.Encoding]::Unicode.GetBytes($randomString)
$primaryKey=[Convert]::ToBase64String($Bytes)

$randomString=-join (((33..126)) * 100 | Get-Random -Count $maxLength | %{[char]$_})
$bytes=[System.Text.Encoding]::Unicode.GetBytes($randomString)
$secondaryKey=[Convert]::ToBase64String($Bytes)

# DPS Enrollment Group name
$enrollmentId="AssetTrackers"

# Create DPS Enrollment Group
# See: https://docs.microsoft.com/en-us/cli/azure/iot/dps/enrollment-group?view=azure-cli-latest#az_iot_dps_enrollment_group_create

az iot dps enrollment-group create `
    -g $resourceGroup `
    --dps-name $dpsName `
    --enrollment-id $enrollmentId `
    --primary-key $primaryKey `
    --secondary-key $secondaryKey

$dpsJson=$(az iot dps show --name $dpsName --resource-group $resourceGroup)
$dps=$dpsJson | ConvertFrom-Json

# Read a DPS ID Scope
$idScope=$dps.properties.idScope


#----------------------------------------------------------------------------------------------------
# Create an Azure Time Series Insights Gen2
# See: https://docs.microsoft.com/en-us/azure/time-series-insights/how-to-create-environment-using-cli

# Create an Azure storage account for tsi environment's cold store
$maxLength=16

# lowercase letters and numbers only
$randomString=-join (((48..57)+(97..122)) * 100 | Get-Random -Count $maxLength | %{[char]$_})
$tsiStorage="storage"+$randomString

az storage account create -g $resourceGroup -n $tsiStorage --https-only
$key=$(az storage account keys list -g $resourceGroup -n $tsiStorage --query [0].value --output tsv)

# Create the Azure Time Series Insights Environment
# See: https://docs.microsoft.com/en-us/cli/azure/tsi/environment/gen2?view=azure-cli-latest#az_tsi_environment_gen2_create

$tsiEnvName="time-series-insights"
$tsiPropertyId="iothub-connection-device-id"
$tsiSkuName="L1"

az tsi environment gen2 create `
    --name $tsiEnvName `
    --location $location `
    --resource-group $resourceGroup `
    --sku name=$tsiSkuName capacity=1 `
    --time-series-id-properties name=$tsiPropertyId type=String `
    --warm-store-configuration data-retention=P7D `
    --storage-configuration account-name=$tsiStorage management-key=$key

# Create an event source under the specified environmen
# See: https://docs.microsoft.com/en-us/cli/azure/tsi/event-source/iothub?view=azure-cli-latest

# Read the "iothubowner" Shared Access Policy key of the IoT Hub
# See: https://docs.microsoft.com/en-us/cli/azure/iot/hub/policy?view=azure-cli-latest#az_iot_hub_policy_show

$policySharedAccessKey=$(az iot hub policy show --hub-name $iotHub --name $iotHubSharedAccessPolicy --query primaryKey --output tsv)

# Read IoT Hub resource id
$resourceId=$(az iot hub show --name $iotHub --query id --output tsv)

$eventSourceName="ioteventsource"
$consumerGroupName="iothubgroup"
$eventSourceKeyName=$iotHubSharedAccessPolicy

az tsi event-source iothub create `
    -g $resourceGroup `
    --environment-name $tsiEnvName `
    --name $eventSourceName `
    --consumer-group-name $consumerGroupName `
    --iot-hub-name $iotHub `
    --location $location `
    --key-name $eventSourceKeyName `
    --shared-access-key $policySharedAccessKey `
    --event-source-resource-id $resourceId

# Create a data access policy granting access to the signed in user
# See: https://docs.microsoft.com/en-us/cli/azure/tsi/access-policy?view=azure-cli-latest

az tsi access-policy create `
    --name "roleAssignment" `
    --environment-name $tsiEnvName `
    --description "TSI owner" `
    --principal-object-id $principalObjectId `
    --roles Reader Contributor `
    --resource-group $resourceGroup
